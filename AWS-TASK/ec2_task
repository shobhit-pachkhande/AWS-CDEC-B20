EC2:- 
Q1. Create an Application Load Balancer with mobile, laptop, tablet, clothes, shoes pages?


--> step 1 = launch 1 instance for default webpage host website ------------ 
                          install httpd service start and enabled host default webpage
                          echo "localhost" > /var/www/html/index.html --------- access through ip
    step 2 = Create 5 instances and Host microservices/webpages(mobile, tablet, clothes, shoes) to 5 all instances. 
                          instance 1 for mobile host webpage 
                               create directory /var/www/html/mobile
                               echo "mobile" > /var/www/html/mobile/index.html --------- access through <ip>/mobile
    step 3= same for all 4 webpages/microservices
    step 5=  Create 6 target group for each instances 
             choose target types instances enable for port HTTP
             Give path of webpage for default give /shirt/ to for health check
    step 6= create 1 alb in listerners add Target group of default  --------  check webspage accessible or not with help of ALB DNS
    step 7= go to listeners rule --> manage rule --> add rule --> give rule name --> add condtion choose path --> give webpage/mivroservice path (/shirt/)
                          --> add action select TG --> GIVE PROROTY VALUE --> create                           
            add rule for remaining 4 microservices                             -----------   access through <dhsn of alb>/mobile


Q2. Create a Simple Application Load Balancer with Auto scaling and host any free css template.


--> Create Template and using User data host any webpage 
    create ASG mention template 
    attach ALB
    define desired/max/min capacity
    choose target tracking policy(dynamic policy) Give target value for cpu utilization
    

Q3. Create a simple classic Load Balancer.


--> create CLB
    add instance
    copy dns 

Q4. Create an AMI Image, with name(tomcat-ami-v1) from an existing running tomcat server.


--> select existinng tomcat instance go to action --> image & templates --> create image
    give AMI IMAGE NAME = tomcat-ami-v1
    create 

Q5. Host any customised HTML web page in Ubuntu server.


--> launch instance ubuntu
    install webserver ------ apt-get install nginx -y
    start and enable service
    echo "localhost" > /var/www/html/index.nginx-debian.html
    access through IP.

Q6. Host any customised HTML web page in RedHat 9 server.


--> launch instance rhel 9
    install webserver ------ yum install httpd -y
    start and enable service
    echo "localhost" > /var/www/html/index.html

Q7. Host any customised HTML web page in windows 11 server.
--> 

Q8. Create a one EC2 Instance with debian family, create an 1000 no of jarvis.txt files and mount the existing S3 bucket into the same server and do upload all the jarvis.txt files into s3 bucket using aws command line tool.


--> launch ubuntu 
    create role --> use case EC2 --> add permission for S3 --> create
    attach role to instance
    access instance through SSH and install awscli
    aws s3 ls
    create files ------   touch jarvis.txt{1..100}
    copy file to S3 bucket 

Q9. Do task number 1 in AWS EC2 in scripting. Automate the whole server level configuration.
--> 


Q10. If your server lost the key-pair, and you wanna take a ssh of that server, then how can you recover the key and take a ssh. (Want the practical, with documentation)


--> Create ami image of an ec2 instance
    and launch an ec2 instance form ami during creation process generate new key pair.